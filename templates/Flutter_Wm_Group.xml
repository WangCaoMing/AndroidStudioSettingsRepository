<templateSet group="Flutter_Wm_Group">
  <template name="dopost" value="    doPost(path: $PATH$, data: {$DATA$}).then((response) {&#10;      if (response != null &amp;&amp; response.body != null) {&#10;         $RESP$ resp = $RESP$.fromJson(jsonDecode(response.body));&#10;        if (resp.errNo == 0) {&#10;          setState(() {&#10;            $END$&#10;          });&#10;        } else {&#10;          &#10;        }&#10;      } else {&#10;        &#10;      }&#10;    }).catchError((error) {&#10;      &#10;    });" description="dart post请求模板代码" toReformat="false" toShortenFQNames="true">
    <variable name="PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="RESP" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="cardcollection" value="import 'dart:convert';&#10;&#10;import 'package:flutter/material.dart';&#10;import 'package:jj_flutter/bridge/jj_native_router.dart';&#10;import 'package:jj_flutter/common/jj_state.dart';&#10;import 'package:jj_flutter/res/jj_theme.dart';&#10;import 'package:jj_flutter/res/jj_v3_colors.dart';&#10;import 'package:jj_flutter/utils/net_util.dart';&#10;&#10;import 'find_page_common_title.dart';&#10;&#10;class $CLASS_NAME$ extends StatefulWidget {&#10;  const $CLASS_NAME$({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  _$CLASS_NAME$State createState() =&gt; _$CLASS_NAME$State();&#10;}&#10;&#10;class _$CLASS_NAME$State extends JJState&lt;$CLASS_NAME$&gt; {&#10;  List&lt;$DATA_NAME$&gt; _mData = List.empty();&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _getData();&#10;  }&#10;&#10;  _getData() {&#10;    doPost(path: &quot;$PATH$&quot;, data: {$DATA$}).then((response) {&#10;      if (response != null &amp;&amp; response.body != null) {&#10;        $DATA_RESP_NAME$ resp = $DATA_RESP_NAME$.fromJson(jsonDecode(response.body));&#10;        if (resp.errNo == 0) {&#10;          updateData(data: resp.$DATA_PARAMS$);&#10;        } else {&#10;          updateData();&#10;        }&#10;      } else {&#10;        updateData();&#10;      }&#10;    }).catchError((error) {&#10;      updateData();&#10;    });&#10;  }&#10;&#10;  updateData({List&lt;$DATA_NAME$&gt;? data}) {&#10;    if (data != null) {&#10;      setState(() {&#10;        _mData = data;&#10;      });&#10;    } else {&#10;      setState(() {&#10;        _mData = List.empty();&#10;      });&#10;    }&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container(&#10;      child: Column(&#10;        children: [&#10;          FindPageCommonTitle(&#10;            title: &quot;&quot;,&#10;            titleStyle: JJTheme.regular_16(&#10;              R.color(context).business_common_v3_font_2,&#10;            ),&#10;            rightButtonText: &quot;&quot;,&#10;            rightButtonAction: () {&#10;            },&#10;          ),&#10;          _cardList()&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  _cardList() {&#10;    return SizedBox(&#10;      height: 250,&#10;      child: PageView.builder(&#10;        controller: PageController(viewportFraction: 0.9146),&#10;        itemBuilder: (BuildContext context, int index) {&#10;          int count = _mData.length;&#10;          $DATA_NAME$ item = _mData[index];&#10;          if (count == 1) {&#10;            return _card(EdgeInsets.only(bottom: 12, top: 12), item);&#10;          }&#10;          if (index == 0) {&#10;            return _card(EdgeInsets.only(right: 6, bottom: 12, top: 12), item);&#10;          } else if (index == count - 1) {&#10;            return _card(EdgeInsets.only(left: 6, bottom: 12, top: 12), item);&#10;          } else {&#10;            return _card(EdgeInsets.only(left: 6, right: 6, bottom: 12, top: 12), item);&#10;          }&#10;        },&#10;        itemCount: _mData.length,&#10;      ),&#10;    );&#10;  }&#10;&#10;  _card(EdgeInsets margin, $DATA_NAME$ data) {&#10;    return GestureDetector(&#10;      onTap: () {},&#10;      child: Container(&#10;        margin: margin,&#10;        width: double.infinity,&#10;        padding: EdgeInsets.all(16),&#10;        decoration: BoxDecoration(&#10;            color: R.color(context).business_common_v3_layer_1,&#10;            borderRadius: BorderRadius.circular(8),&#10;            border: Border.all(color: R.color(context).business_common_v3_gray_1_2, width: 0.5),&#10;            boxShadow: [BoxShadow(color: Color(0xFF6A89B2).withOpacity(0.08), offset: Offset(0, 4), blurRadius: 12, spreadRadius: 0)]),&#10;        child: Text(&quot;hello world&quot;),&#10;      ),&#10;    );&#10;  }&#10;}&#10;" description="卡片集合风格样板代码" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA_RESP_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA_PARAMS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="cardcollectionwithemptyanderror" value="import 'dart:convert';&#10;&#10;import 'package:flutter/material.dart';&#10;import 'package:jj_flutter/common/jj_state.dart';&#10;import 'package:jj_flutter/module/find/model/find_page_column_recommend_data_resp.dart';&#10;import 'package:jj_flutter/module/find/view/find_page_common_error_card.dart';&#10;import 'package:jj_flutter/res/jj_v3_colors.dart';&#10;import 'package:jj_flutter/utils/net_util.dart';&#10;&#10;import 'find_page_common_title.dart';&#10;&#10;class $CLASS_NAME$ extends StatefulWidget {&#10;  const $CLASS_NAME$({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  _$CLASS_NAME$State createState() =&gt; _$CLASS_NAME$State();&#10;}&#10;&#10;class _$CLASS_NAME$State extends JJState&lt;$CLASS_NAME$&gt; {&#10;  List&lt;$DATA$&gt; _mData = List.empty();&#10;  RequestState _mRequestState = RequestState.START;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _getData();&#10;  }&#10;&#10;  _getData() {&#10;    doPost(path: &quot;$PATH_NAME$&quot;, data: {$PARAMS$}).then((response) {&#10;      if (response != null &amp;&amp; response.body != null) {&#10;        $RESP$ resp = $RESP$.fromJson(jsonDecode(response.body));&#10;        if (resp.errNo == 0) {&#10;          updateData(RequestState.SUCCESS, data: resp.$DATA_NAME$);&#10;        } else {&#10;          updateData(RequestState.FAILED);&#10;        }&#10;      } else {&#10;        updateData(RequestState.FAILED);&#10;      }&#10;    }).catchError((error) {&#10;      updateData(RequestState.FAILED);&#10;    });&#10;  }&#10;&#10;  updateData(RequestState requestState, {List&lt;$DATA$&gt;? data}) {&#10;    setState(() {&#10;      _mRequestState = requestState;&#10;      _mData = data ?? List.empty();&#10;    });&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container(&#10;      child: Column(&#10;        children: [&#10;          FindPageCommonTitle(&#10;            title: &quot;推荐专栏&quot;,&#10;            rightButtonAction: () {},&#10;          ),&#10;          if (_mRequestState == RequestState.FAILED) _networkErrorCard() else if (_mRequestState == RequestState.SUCCESS &amp;&amp; _mData.isEmpty) _emptyErrorCard() else _cardList()&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  _cardList() {&#10;    return SizedBox(&#10;      height: $CARD_HEIGHT$,&#10;      child: PageView.builder(&#10;        controller: PageController(viewportFraction: 0.9146),&#10;        itemBuilder: (BuildContext context, int index) {&#10;          int count = _mData.length;&#10;          ColumnData item = _mData[index];&#10;          if (count == 1) {&#10;            return _card(EdgeInsets.only(bottom: 12, top: 12), item);&#10;          }&#10;          if (index == 0) {&#10;            return _card(EdgeInsets.only(right: 6, bottom: 12, top: 12), item);&#10;          } else if (index == count - 1) {&#10;            return _card(EdgeInsets.only(left: 6, bottom: 12, top: 12), item);&#10;          } else {&#10;            return _card(EdgeInsets.only(left: 6, right: 6, bottom: 12, top: 12), item);&#10;          }&#10;        },&#10;        itemCount: _mData.length,&#10;      ),&#10;    );&#10;  }&#10;&#10;  _card(EdgeInsets margin, $DATA$ data) {&#10;    return GestureDetector(&#10;      onTap: () {},&#10;      child: Container(&#10;        margin: margin,&#10;        width: double.infinity,&#10;        padding: EdgeInsets.all(16),&#10;        decoration: BoxDecoration(&#10;            color: R.color(context).business_common_v3_layer_1,&#10;            borderRadius: BorderRadius.circular(8),&#10;            border: Border.all(color: R.color(context).business_common_v3_gray_1_2, width: 0.5),&#10;            boxShadow: [BoxShadow(color: Color(0xFF6A89B2).withOpacity(0.08), offset: Offset(0, 4), blurRadius: 12, spreadRadius: 0)]),&#10;        child: Text(&quot;hello world$END$&quot;),&#10;      ),&#10;    );&#10;  }&#10;&#10;  _networkErrorCard() {&#10;    return Container(&#10;      height: $HEIGHT$,&#10;      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 12),&#10;      width: double.infinity,&#10;      padding: EdgeInsets.all(16),&#10;      decoration: BoxDecoration(&#10;          color: R.color(context).business_common_v3_layer_1,&#10;          borderRadius: BorderRadius.circular(8),&#10;          border: Border.all(color: R.color(context).business_common_v3_gray_1_2, width: 0.5),&#10;          boxShadow: [BoxShadow(color: Color(0xFF6A89B2).withOpacity(0.08), offset: Offset(0, 4), blurRadius: 12, spreadRadius: 0)]),&#10;      child: FindPageCommonErrorCard(&#10;        buttonTapCallback: () {&#10;          _getData();&#10;        },&#10;      ),&#10;    );&#10;  }&#10;&#10;  _emptyErrorCard() {&#10;    return Container(&#10;      height: $HEIGHT$,&#10;      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 12),&#10;      width: double.infinity,&#10;      padding: EdgeInsets.all(16),&#10;      decoration: BoxDecoration(&#10;          color: R.color(context).business_common_v3_layer_1,&#10;          borderRadius: BorderRadius.circular(8),&#10;          border: Border.all(color: R.color(context).business_common_v3_gray_1_2, width: 0.5),&#10;          boxShadow: [BoxShadow(color: Color(0xFF6A89B2).withOpacity(0.08), offset: Offset(0, 4), blurRadius: 12, spreadRadius: 0)]),&#10;      child: FindPageCommonErrorCard(&#10;        text: &quot;列表空空的~&quot;,&#10;        buttonTapCallback: () {&#10;          _getData();&#10;        },&#10;      ),&#10;    );&#10;  }&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PATH_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="RESP" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CARD_HEIGHT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="HEIGHT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
</templateSet>